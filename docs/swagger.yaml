basePath: /api/v1
definitions:
  models.LoginResponse:
    properties:
      tokens:
        $ref: '#/definitions/models.TokenPair'
      user:
        $ref: '#/definitions/models.UserResponse'
    type: object
  models.RefreshTokenRequest:
    properties:
      refresh_token:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    required:
    - refresh_token
    type: object
  models.SwaggerErrorResponse:
    properties:
      data:
        example: "null"
        type: string
      error:
        example: Detailed error message
        type: string
      message:
        example: Error occurred
        type: string
      success:
        example: false
        type: boolean
    type: object
  models.SwaggerLoginResponse:
    properties:
      data:
        $ref: '#/definitions/models.LoginResponse'
      error:
        example: ""
        type: string
      message:
        example: Login successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.SwaggerResponse:
    properties:
      data: {}
      error:
        example: ""
        type: string
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.SwaggerTokenResponse:
    properties:
      data:
        $ref: '#/definitions/models.TokenPair'
      error:
        example: ""
        type: string
      message:
        example: Token refreshed successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.SwaggerUserResponse:
    properties:
      data:
        $ref: '#/definitions/models.UserResponse'
      error:
        example: ""
        type: string
      message:
        example: Profile retrieved successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.TokenPair:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      expires_in:
        example: 900
        type: integer
      refresh_token:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  models.UserCreateRequest:
    properties:
      email:
        example: john@example.com
        type: string
      name:
        example: John Doe
        maxLength: 50
        minLength: 2
        type: string
      password:
        example: password123
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  models.UserLoginRequest:
    properties:
      email:
        example: john@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  models.UserResponse:
    properties:
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      email:
        example: john@example.com
        type: string
      id:
        example: 507f1f77bcf86cd799439011
        type: string
      name:
        example: John Doe
        type: string
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
    type: object
  models.UserUpdateRequest:
    properties:
      email:
        example: jane@example.com
        type: string
      name:
        example: Jane Doe
        maxLength: 50
        minLength: 2
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://www.example.com/support
  description: A robust backend service built with Go Fiber framework, featuring MongoDB
    integration and JWT-based authentication with refresh token support.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Backend API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: User login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      summary: User login
      tags:
      - Authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Revoke refresh token to logout user
      parameters:
      - description: Refresh token to revoke
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      summary: User logout
      tags:
      - Authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Get a new access token using refresh token
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerTokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      summary: Refresh access token
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account with email and password
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SwaggerLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      summary: Register a new user
      tags:
      - Authentication
  /users/logout-all:
    post:
      consumes:
      - application/json
      description: Revoke all refresh tokens for the user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout from all devices
      tags:
      - Authentication
  /users/profile:
    delete:
      consumes:
      - application/json
      description: Delete current user's account permanently
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user profile
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Get current user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerUserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update current user's profile information
      parameters:
      - description: Updated user data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - User
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
