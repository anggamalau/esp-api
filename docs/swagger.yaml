basePath: /api/v1
definitions:
  models.AdminUserRoleUpdateRequest:
    properties:
      role:
        enum:
        - admin
        - liaison
        - voice
        - finance
        example: liaison
        type: string
    required:
    - role
    type: object
  models.AdminUserRoleUpdateResponse:
    properties:
      message:
        example: User role updated successfully
        type: string
      user:
        $ref: '#/definitions/models.UserResponse'
    type: object
  models.ChangePasswordRequest:
    properties:
      confirm_password:
        example: newpassword456
        type: string
      current_password:
        example: oldpassword123
        type: string
      new_password:
        example: newpassword456
        minLength: 6
        type: string
    required:
    - confirm_password
    - current_password
    - new_password
    type: object
  models.ChangePasswordResponse:
    properties:
      message:
        example: Your password has been updated successfully
        type: string
    type: object
  models.ForgotPasswordRequest:
    properties:
      email:
        example: john@example.com
        type: string
    required:
    - email
    type: object
  models.ForgotPasswordResponse:
    properties:
      message:
        example: New password has been sent to your email address
        type: string
    type: object
  models.LoginResponse:
    properties:
      tokens:
        $ref: '#/definitions/models.TokenPair'
      user:
        $ref: '#/definitions/models.UserResponse'
    type: object
  models.MenuCreateRequest:
    properties:
      description:
        example: Main dashboard view
        maxLength: 200
        type: string
      icon:
        example: dashboard-icon
        maxLength: 50
        type: string
      name:
        example: Dashboard
        maxLength: 50
        minLength: 2
        type: string
      order:
        example: 1
        minimum: 0
        type: integer
      path:
        example: /dashboard
        maxLength: 100
        type: string
    required:
    - name
    - path
    type: object
  models.MenuResponse:
    properties:
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      description:
        example: Main dashboard view
        type: string
      icon:
        example: dashboard-icon
        type: string
      id:
        example: 507f1f77bcf86cd799439011
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: Dashboard
        type: string
      order:
        example: 1
        type: integer
      path:
        example: /dashboard
        type: string
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
    type: object
  models.MenuUpdateRequest:
    properties:
      description:
        example: Main dashboard view
        maxLength: 200
        type: string
      icon:
        example: dashboard-icon
        maxLength: 50
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: Dashboard
        maxLength: 50
        minLength: 2
        type: string
      order:
        example: 1
        minimum: 0
        type: integer
      path:
        example: /dashboard
        maxLength: 100
        type: string
    type: object
  models.PendingUserResponse:
    properties:
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      email:
        example: john@example.com
        type: string
      id:
        example: 507f1f77bcf86cd799439011
        type: string
      name:
        example: John Doe
        type: string
      role:
        example: user
        type: string
    type: object
  models.RefreshTokenRequest:
    properties:
      refresh_token:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    required:
    - refresh_token
    type: object
  models.RegisterPendingResponse:
    properties:
      message:
        example: Registration successful. Your account is pending admin verification.
        type: string
      user:
        $ref: '#/definitions/models.UserResponse'
    type: object
  models.RoleMenuPermissionResponse:
    properties:
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      granted_by_id:
        example: 507f1f77bcf86cd799439011
        type: string
      granted_by_name:
        example: Admin User
        type: string
      id:
        example: 507f1f77bcf86cd799439011
        type: string
      menu_id:
        example: 507f1f77bcf86cd799439011
        type: string
      menu_name:
        example: Dashboard
        type: string
      role:
        example: liaison
        type: string
    type: object
  models.RolePermissionSummary:
    properties:
      menu_count:
        example: 3
        type: integer
      menus:
        items:
          $ref: '#/definitions/models.MenuResponse'
        type: array
      role:
        example: liaison
        type: string
    type: object
  models.SwaggerAdminUserRoleUpdateResponse:
    properties:
      data:
        $ref: '#/definitions/models.AdminUserRoleUpdateResponse'
      error:
        example: ""
        type: string
      message:
        example: User role updated successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.SwaggerChangePasswordResponse:
    properties:
      data:
        $ref: '#/definitions/models.ChangePasswordResponse'
      error:
        example: ""
        type: string
      message:
        example: Password changed successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.SwaggerErrorResponse:
    properties:
      data:
        example: "null"
        type: string
      error:
        example: Detailed error message
        type: string
      message:
        example: Error occurred
        type: string
      success:
        example: false
        type: boolean
    type: object
  models.SwaggerForgotPasswordResponse:
    properties:
      data:
        $ref: '#/definitions/models.ForgotPasswordResponse'
      message:
        example: Request processed successfully
        type: string
      status:
        example: success
        type: string
    type: object
  models.SwaggerLoginResponse:
    properties:
      data:
        $ref: '#/definitions/models.LoginResponse'
      error:
        example: ""
        type: string
      message:
        example: Login successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.SwaggerPendingUsersResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.PendingUserResponse'
        type: array
      error:
        example: ""
        type: string
      message:
        example: Pending users retrieved successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.SwaggerRegisterPendingResponse:
    properties:
      data:
        $ref: '#/definitions/models.RegisterPendingResponse'
      error:
        example: ""
        type: string
      message:
        example: Registration successful. Your account is pending admin verification.
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.SwaggerResponse:
    properties:
      data: {}
      error:
        example: ""
        type: string
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.SwaggerTokenResponse:
    properties:
      data:
        $ref: '#/definitions/models.TokenPair'
      message:
        example: Token refreshed successfully
        type: string
      status:
        example: success
        type: string
    type: object
  models.SwaggerUserResponse:
    properties:
      data:
        $ref: '#/definitions/models.UserResponse'
      error:
        example: ""
        type: string
      message:
        example: Profile retrieved successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.TokenPair:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      expires_in:
        example: 900
        type: integer
      refresh_token:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  models.UserCreateRequest:
    properties:
      email:
        example: john@example.com
        type: string
      name:
        example: John Doe
        maxLength: 50
        minLength: 2
        type: string
      password:
        example: password123
        minLength: 6
        type: string
      role:
        enum:
        - admin
        - liaison
        - voice
        - finance
        example: user
        type: string
    required:
    - email
    - name
    - password
    - role
    type: object
  models.UserLoginRequest:
    properties:
      email:
        example: john@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  models.UserMenuResponse:
    properties:
      description:
        example: Main dashboard view
        type: string
      icon:
        example: dashboard-icon
        type: string
      id:
        example: 507f1f77bcf86cd799439011
        type: string
      name:
        example: Dashboard
        type: string
      order:
        example: 1
        type: integer
      path:
        example: /dashboard
        type: string
    type: object
  models.UserResponse:
    properties:
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      email:
        example: john@example.com
        type: string
      id:
        example: 507f1f77bcf86cd799439011
        type: string
      is_verified:
        example: true
        type: boolean
      name:
        example: John Doe
        type: string
      role:
        example: user
        type: string
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      verification_notes:
        example: Verified by admin
        type: string
      verified_at:
        example: "2024-01-01T00:00:00Z"
        type: string
    type: object
  models.UserUpdateRequest:
    properties:
      email:
        example: jane@example.com
        type: string
      name:
        example: Jane Doe
        maxLength: 50
        minLength: 2
        type: string
    type: object
  models.VerificationRequest:
    properties:
      notes:
        example: Identity verified through company records
        maxLength: 500
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://www.example.com/support
  description: A robust backend service built with Go Fiber framework, featuring MongoDB
    integration and JWT-based authentication with refresh token support.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Backend API
  version: "1.0"
paths:
  /admin/menus:
    get:
      consumes:
      - application/json
      description: Get all menu items (Admin only)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.SwaggerResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.MenuResponse'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all menus
      tags:
      - Menu Management
    post:
      consumes:
      - application/json
      description: Create a new menu item (Admin only)
      parameters:
      - description: Menu creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.MenuCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.SwaggerResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.MenuResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new menu
      tags:
      - Menu Management
  /admin/menus/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a menu item (Admin only)
      parameters:
      - description: Menu ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete menu
      tags:
      - Menu Management
    get:
      consumes:
      - application/json
      description: Get a specific menu by ID (Admin only)
      parameters:
      - description: Menu ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.SwaggerResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.MenuResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get menu by ID
      tags:
      - Menu Management
    put:
      consumes:
      - application/json
      description: Update a menu item (Admin only)
      parameters:
      - description: Menu ID
        in: path
        name: id
        required: true
        type: string
      - description: Menu update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.MenuUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.SwaggerResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.MenuResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update menu
      tags:
      - Menu Management
  /admin/menus/{id}/roles:
    get:
      consumes:
      - application/json
      description: Get all roles that have access to a specific menu (Admin only)
      parameters:
      - description: Menu ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.SwaggerResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.RoleMenuPermissionResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get roles by menu
      tags:
      - Permission Management
  /admin/roles/{role}/menus:
    get:
      consumes:
      - application/json
      description: Get all menu permissions for a specific role (Admin only)
      parameters:
      - description: Role name
        in: path
        name: role
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.SwaggerResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.RoleMenuPermissionResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get permissions by role
      tags:
      - Permission Management
  /admin/roles/{role}/menus/{menuId}:
    delete:
      consumes:
      - application/json
      description: Revoke access to a menu for a specific role (Admin only)
      parameters:
      - description: Role name
        in: path
        name: role
        required: true
        type: string
      - description: Menu ID
        in: path
        name: menuId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      security:
      - BearerAuth: []
      summary: Revoke menu permission from role
      tags:
      - Permission Management
    post:
      consumes:
      - application/json
      description: Grant access to a menu for a specific role (Admin only)
      parameters:
      - description: Role name
        in: path
        name: role
        required: true
        type: string
      - description: Menu ID
        in: path
        name: menuId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      security:
      - BearerAuth: []
      summary: Grant menu permission to role
      tags:
      - Permission Management
  /admin/roles/permissions:
    get:
      consumes:
      - application/json
      description: Get all role-menu permissions (Admin only)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.SwaggerResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.RoleMenuPermissionResponse'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all permissions
      tags:
      - Permission Management
  /admin/roles/summary:
    get:
      consumes:
      - application/json
      description: Get summary of permissions for all roles (Admin only)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.SwaggerResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.RolePermissionSummary'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get role permission summary
      tags:
      - Permission Management
  /admin/users/{id}:
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific user (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerUserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user details
      tags:
      - Admin
  /admin/users/{id}/role:
    put:
      consumes:
      - application/json
      description: Update a user's role (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Role update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.AdminUserRoleUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerAdminUserRoleUpdateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user role
      tags:
      - Admin
  /admin/users/{id}/verify:
    post:
      consumes:
      - application/json
      description: Verify a user account to allow them to login
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Verification data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.VerificationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      security:
      - BearerAuth: []
      summary: Verify user
      tags:
      - Admin
  /admin/users/pending:
    get:
      consumes:
      - application/json
      description: Get list of users awaiting admin verification
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerPendingUsersResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get pending users
      tags:
      - Admin
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Generate a new password and send it to user's email
      parameters:
      - description: Email address for password reset
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerForgotPasswordResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      summary: Reset user password
      tags:
      - Authentication
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: User login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      summary: User login
      tags:
      - Authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Revoke refresh token to logout user
      parameters:
      - description: Refresh token to revoke
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      summary: User logout
      tags:
      - Authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Get a new access token using refresh token
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerTokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      summary: Refresh access token
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account with email and password
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SwaggerRegisterPendingResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      summary: Register a new user
      tags:
      - Authentication
  /users/change-password:
    put:
      consumes:
      - application/json
      description: Change current user's password by providing current and new password
      parameters:
      - description: Password change data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerChangePasswordResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - User
  /users/logout-all:
    post:
      consumes:
      - application/json
      description: Revoke all refresh tokens for the user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout from all devices
      tags:
      - Authentication
  /users/menus:
    get:
      consumes:
      - application/json
      description: Get menus accessible by the current user based on their role
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.SwaggerResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.UserMenuResponse'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user accessible menus
      tags:
      - User Menu Access
  /users/profile:
    delete:
      consumes:
      - application/json
      description: Delete current user's account permanently
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user profile
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Get current user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerUserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update current user's profile information
      parameters:
      - description: Updated user data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SwaggerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - User
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
